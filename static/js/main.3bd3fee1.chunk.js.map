{"version":3,"sources":["util.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TOTAL_WEIGHT","dist","reduce","agg","item","weight","Number","pick_random_letter_en","target","Math","random","x","letter","w","String","Error","drop_item_mut","array","i","indexOf","splice","Lettergrid","letters","highlighted","letter_pool","className","map","l","classname","WordSmith","onChange","onReturn","placeholder","e","currentTarget","value","onKeyDown","key","taken","split","filter","includes","preventDefault","tabIndex","WordTreasure","words","Score","score","App","useState","currWord","setCurrWord","setLetters","treasureList","setTreasureList","useEffect","random_letters","console","log","push","dict","setDict","Typo","undefined","flags","dictionaryPath","ready","then","d","catch","word","length","s","check","uniq","Set","Array","from","sort","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bd3fee1.chunk.js","sourcesContent":["import dist from \"./letter-dist-en.json\";\nconst TOTAL_WEIGHT: number = dist.reduce((agg, item) => {\n  // its not smart enought to understnad the _letter means I know I dont' need it but I need a placeholder\n  // eslint-disable-next-line\n  const [_letter, weight] = item;\n  return agg + Number(weight);\n}, 0);\n\nexport const pick_random_letter_en: () => string = () => {\n  const target = Math.random() * TOTAL_WEIGHT;\n  let x = 0;\n  for (const [letter, w] of dist) {\n    const weight = Number(w);\n    if (x + weight >= target) {\n      return String(letter);\n    } else {\n      x += weight;\n    }\n  }\n  throw new Error(\"A letter should have been found.\");\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport './App.css';\nimport './Lettergrid.css';\nimport './WordSmith.css';\nimport './WordTreasure.css';\nimport { pick_random_letter_en } from './util';\nimport { Typo } from 'typo-js-ts';\n\nconst drop_item_mut: <T>(array: Array<T>, item: T) => Boolean = (\n  array,\n  item\n) => {\n  const i = array.indexOf(item);\n  if (i >= 0) {\n    array.splice(i, 1);\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst Lettergrid: FC<{ letters: string[]; highlighted: string[] }> = ({\n  letters,\n  highlighted,\n}) => {\n  let letter_pool = [...highlighted];\n  return (\n    <div className=\"Lettergrid\">\n      {letters.map((l, i) => {\n        let classname = 'Lettergrid-letter';\n        if (drop_item_mut(letter_pool, l)) {\n          classname += ' Lettergrid-letter-highlighted';\n        }\n        return (\n          <span key={i} className={classname}>\n            {l}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\n// TODO restrict or highlight letters that are not in the random_letters list\nconst WordSmith: FC<{\n  letters: string[];\n  onChange: (arg0: string) => void;\n  onReturn: (arg0: string) => Boolean;\n}> = ({ onChange, onReturn, letters }) => (\n  <div className=\"WordSmith\">\n    <input\n      placeholder=\"type here\"\n      onChange={(e) => onChange(e.currentTarget.value)}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          if (onReturn(e.currentTarget.value)) {\n            e.currentTarget.value = '';\n          }\n          return true;\n        } else if (e.key >= 'a' && e.key <= 'z') {\n          // Note: this is ugly, because it mutes the taken field as a side\n          // effect\n          let taken = e.currentTarget.value.split('');\n          let available = letters.filter((l) => !drop_item_mut(taken, l));\n\n          if (available.includes(e.key)) {\n            return true;\n          } else {\n            e.preventDefault();\n            return false;\n          }\n        }\n      }}\n      tabIndex={100}\n    />\n    <button>‚èé</button>\n  </div>\n);\n\nconst WordTreasure: FC<{ words: string[] }> = ({ words }) => (\n  <div className=\"WordTreasure\">\n    <ol>\n      {words.map((w) => (\n        <li key={w}>{w}</li>\n      ))}\n    </ol>\n  </div>\n);\n\nconst Score: FC<{ score: number }> = ({ score }) => (\n  <div className=\"Score\">Score: {score}</div>\n);\n\nfunction App() {\n  const [currWord, setCurrWord] = useState('');\n  const [letters, setLetters] = useState<string[]>([]);\n  const [treasureList, setTreasureList] = useState<string[]>([]);\n\n  useEffect(() => {\n    const random_letters: string[] = [];\n\n    console.log('loading random letters');\n    for (let i = 0; i < 16; i++) {\n      random_letters.push(pick_random_letter_en());\n    }\n    setLetters(random_letters);\n  }, []);\n\n  const [dict, setDict] = useState<Typo>();\n  useEffect(() => {\n    console.log('loading spellchecker');\n    new Typo('en_GB', undefined, undefined, {\n      flags: {},\n      dictionaryPath: './word-wizard/dictionaries',\n    }).ready\n      .then((d) => {\n        console.log('dictionary loaded');\n        setDict(d);\n      })\n      .catch(console.log);\n  }, []);\n\n  // TODO spellcheck entered word to see if it exists\n  // TODO score each valid word\n  // TODO display word scores and totals\n  // TODO only allow enterting letters which are not taken yet\n  // TODO fancy styling\n  // TODO  - grey out (highlight) types letters\n\n  let score = treasureList.reduce((score, word) => score + word.length, 0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Word Finder</h1>\n      </header>\n      <Lettergrid letters={letters} highlighted={currWord.split('')} />\n      <WordSmith\n        letters={letters}\n        onChange={(s) => {\n          setCurrWord(s);\n        }}\n        onReturn={(s) => {\n          let spellchecked = dict && dict.check(s);\n          if (spellchecked) {\n            let uniq = new Set([...treasureList, s]);\n            setTreasureList(Array.from(uniq).sort());\n            setCurrWord('');\n            return true;\n          } else {\n            return false;\n          }\n        }}\n      />\n      <Score score={score} />\n      <WordTreasure words={treasureList} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}