{"version":3,"sources":["util.ts","Lettergrid.tsx","WordSmith.tsx","game_rules.ts","WordTreasure.tsx","Score.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TOTAL_WEIGHT","dist","reduce","agg","item","weight","Number","pick_random_letter_en","target","Math","random","x","letter","w","String","Error","drop_item_mut","array","i","indexOf","splice","Lettergrid","letters","highlighted","onClick","letter_pool","className","map","l","classname","_e","WordSmith","isValidAddition","currentWord","onChange","onReturn","value","placeholder","e","currentTarget","toLowerCase","onKeyDown","key","preventDefault","tabIndex","slice","allowedAddition","newLetter","taken","split","filter","includes","wordScore","word","length","WordTreasure","words","sort","a","b","Score","score","App","useState","currWord","setCurrWord","setLetters","treasureList","setTreasureList","useEffect","random_letters","console","log","push","dict","setDict","Typo","undefined","flags","dictionaryPath","process","ready","then","d","catch","s","check","uniq","Set","Array","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfd1a3de.chunk.js","sourcesContent":["import dist from \"./letter-dist-en.json\";\nconst TOTAL_WEIGHT: number = dist.reduce((agg, item) => {\n  // its not smart enought to understnad the _letter means I know I dont' need it but I need a placeholder\n  // eslint-disable-next-line\n  const [_letter, weight] = item;\n  return agg + Number(weight);\n}, 0);\n\nexport const pick_random_letter_en: () => string = () => {\n  const target = Math.random() * TOTAL_WEIGHT;\n  let x = 0;\n  for (const [letter, w] of dist) {\n    const weight = Number(w);\n    if (x + weight >= target) {\n      return String(letter);\n    } else {\n      x += weight;\n    }\n  }\n  throw new Error(\"A letter should have been found.\");\n};\n\nexport const drop_item_mut: <T>(array: Array<T>, item: T) => Boolean = (\n  array,\n  item\n) => {\n  const i = array.indexOf(item);\n  if (i >= 0) {\n    array.splice(i, 1);\n    return true;\n  } else {\n    return false;\n  }\n};\n\n\n","import React, { FC } from 'react';\nimport { drop_item_mut } from './util';\nimport './Lettergrid.css';\n\nconst Lettergrid: FC<{\n  letters: string[];\n  highlighted: string[];\n  onClick?: (arg0: string) => void;\n}> = ({ letters, highlighted, onClick }) => {\n  let letter_pool = [...highlighted];\n  return (\n    <div className=\"Lettergrid\">\n      {letters.map((l, i) => {\n        let classname = 'Lettergrid-letter';\n        if (drop_item_mut(letter_pool, l)) {\n          classname += ' Lettergrid-letter-highlighted';\n        }\n        return (\n          <span\n            key={i}\n            className={classname}\n            onClick={(_e) => {\n              onClick && onClick(l);\n            }}\n          >\n            {l}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Lettergrid;\n","import React, { FC } from 'react';\nimport './WordSmith.css';\n\nconst WordSmith: FC<{\n  letters: string[];\n  currentWord: string;\n  isValidAddition: (arg0: string[], arg1: string, arg2: string) => Boolean;\n  onChange: (arg0: string) => void;\n  onReturn: (arg0: string) => Boolean;\n}> = ({ isValidAddition, currentWord, onChange, onReturn, letters }) => (\n  <div className=\"WordSmith\">\n    <input\n      className=\"WordSmith_input\"\n      value={currentWord}\n      placeholder=\"type here\"\n      onChange={(e) => onChange(e.currentTarget.value.toLowerCase())}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          if (onReturn(e.currentTarget.value)) {\n            e.currentTarget.value = '';\n          }\n          return true;\n        } else if (e.key === 'Backspace') {\n          return true;\n        } else if (\n          (e.key >= 'a' && e.key <= 'z') ||\n          (e.key >= 'A' && e.key <= 'Z')\n        ) {\n          if (isValidAddition(letters, currentWord, e.key.toLowerCase())) {\n            return true;\n          } else {\n            e.preventDefault();\n            return false;\n          }\n        }\n      }}\n      tabIndex={100}\n    />\n    <button className=\"WordSmith_enter\" onClick={(_e) => onReturn(currentWord)}>\n      ⏎\n    </button>\n    <button\n      className=\"WordSmith_backspace\"\n      onClick={(_e) => onChange(currentWord.slice(0, -1))}\n    >\n      ⌫\n    </button>\n  </div>\n);\n\nexport default WordSmith;\n","import { drop_item_mut } from './util';\n\nexport const allowedAddition = (\nletters: string[],\ncurrentWord: string,\nnewLetter: string\n) => {\n  // Note: this is ugly, because it mutes the taken field as a side\n  // effect\n  let taken = `${currentWord}`.split('');\n  let available = letters.filter((l) => !drop_item_mut(taken, l));\n  return available.includes(newLetter);\n};\n\n\nexport const wordScore = (\nword: string\n) => {\n  if (word.length <= 2) {\n    return 0\n  } else {\n    return word.length\n  }\n};\n","import React, { FC } from 'react';\nimport './WordTreasure.css';\nimport { wordScore } from './game_rules';\n\nconst WordTreasure: FC<{ words: string[] }> = ({ words }) => (\n  <div className=\"WordTreasure\">\n    <ol>\n      {words\n        .sort((a, b) => wordScore(b) - wordScore(a))\n        .map((w) => (\n          <li key={w}>\n            <span className=\"WordTreasure_word\">{w} </span>\n            <span className=\"WordTreasure_word_score\">({wordScore(w)})</span>\n          </li>\n        ))}\n    </ol>\n  </div>\n);\n\nexport default WordTreasure;\n","import React, { FC } from 'react';\nimport './Score.css';\n\nconst Score: FC<{ score: number }> = ({ score }) => (\n  <div className=\"Score\">Score: {score}</div>\n);\n\nexport default Score;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { pick_random_letter_en } from './util';\nimport { Typo } from 'typo-js-ts';\nimport Lettergrid from './Lettergrid';\nimport WordSmith from './WordSmith';\nimport WordTreasure from './WordTreasure';\nimport Score from './Score';\nimport { allowedAddition } from './game_rules';\n\nfunction App() {\n  const [currWord, setCurrWord] = useState('');\n  const [letters, setLetters] = useState<string[]>([]);\n  const [treasureList, setTreasureList] = useState<string[]>([]);\n\n  useEffect(() => {\n    const random_letters: string[] = [];\n\n    console.log('loading random letters');\n    for (let i = 0; i < 16; i++) {\n      random_letters.push(pick_random_letter_en());\n    }\n    setLetters(random_letters);\n  }, []);\n\n  const [dict, setDict] = useState<Typo>();\n  useEffect(() => {\n    console.log('loading spellchecker');\n    new Typo('en_GB', undefined, undefined, {\n      flags: {},\n      dictionaryPath: process.env.PUBLIC_URL + '/dictionaries',\n    }).ready\n      .then((d) => {\n        console.log('dictionary loaded');\n        setDict(d);\n      })\n      .catch(console.log);\n  }, []);\n\n  let score = treasureList.reduce((score, word) => score + word.length, 0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Word Wizard</h1>\n      </header>\n      <p>\n        Conjure as many british english words as possible from this set of\n        letters. One and two letter word are worthless.\n      </p>\n      <Lettergrid\n        onClick={(l) => {\n          allowedAddition(letters, currWord, l) && setCurrWord(currWord + l);\n        }}\n        letters={letters}\n        highlighted={currWord.split('')}\n      />\n      <WordSmith\n        isValidAddition={allowedAddition}\n        currentWord={currWord}\n        letters={letters}\n        onChange={(s) => {\n          setCurrWord(s);\n        }}\n        onReturn={(s) => {\n          let spellchecked = dict && dict.check(s);\n          if (spellchecked) {\n            let uniq = new Set([...treasureList, s]);\n            setTreasureList(Array.from(uniq).sort());\n            setCurrWord('');\n            return true;\n          } else {\n            return false;\n          }\n        }}\n      />\n      <Score score={score} />\n      <WordTreasure words={treasureList} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}