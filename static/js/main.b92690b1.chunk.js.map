{"version":3,"sources":["util.ts","Lettergrid.tsx","WordSmith.tsx","game-rules.ts","WordTreasure.tsx","Score.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["drop_item_mut","array","item","i","indexOf","splice","Lettergrid","letters","highlighted","onClick","letter_pool","className","map","l","classname","_e","WordSmith","spellcheck","isValidAddition","currentWord","onChange","onReturn","value","placeholder","e","currentTarget","toLowerCase","onKeyDown","key","preventDefault","tabIndex","disabled","slice","MAX_WEIGHT","Math","max","dist","pair","Number","allowedAddition","newLetter","taken","split","filter","includes","wordScore","word","length","reduce","score","letter","randomLetters","count","pool","weight","probability","tickets","ceil","push","String","arr","j","floor","random","shuffle_array","WordTreasure","words","sort","a","b","w","Score","target","encodeWords","msg","msgpack","encode","Base64","fromUint8Array","App","search","useLocation","urlParams","qs","parse","history","useHistory","update_query_params","updates","new_params","stringify","console","log","given_letters","useState","setScore","currWord","setCurrWord","_setLetters","setLetters","join","givenTreasure","encoded","decoded","toUint8Array","decode","decodeWords","treasureList","_setTreasureList","setTreasureList","treasure","num_letters","useEffect","dict","setDict","Typo","undefined","flags","dictionaryPath","process","ready","then","d","catch","check","s","uniq","Set","Array","from","style","display","justifyContent","marginTop","paddingLeft","paddingRight","marginBottom","to","_","pathname","targetScore","AppStack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b92690b1.chunk.js","sourcesContent":["export const drop_item_mut: <T>(array: Array<T>, item: T) => Boolean = (\n  array,\n  item\n) => {\n  const i = array.indexOf(item);\n  if (i >= 0) {\n    array.splice(i, 1);\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// taken from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport const shuffle_array: <T>(arr: Array<T>) => Array<T> = (arr) => {\n  let array = [...arr];\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n","import React, { FC } from 'react';\nimport { drop_item_mut } from './util';\nimport './Lettergrid.css';\n\nconst Lettergrid: FC<{\n  letters: string[];\n  highlighted: string[];\n  onClick?: (arg0: string) => void;\n}> = ({ letters, highlighted, onClick }) => {\n  let letter_pool = [...highlighted];\n  return (\n    <div className=\"Lettergrid\">\n      {letters.map((l, i) => {\n        let classname = 'Lettergrid-letter btn';\n        if (drop_item_mut(letter_pool, l)) {\n          classname += ' Lettergrid-letter-highlighted';\n        }\n        return (\n          <span\n            key={i}\n            className={classname}\n            onClick={(_e) => {\n              onClick && onClick(l);\n            }}\n          >\n            {l}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Lettergrid;\n","import React, { FC } from 'react';\nimport './WordSmith.css';\n\nconst WordSmith: FC<{\n  letters: string[];\n  spellcheck: (word: string) => boolean;\n  currentWord: string;\n  isValidAddition: (arg0: string[], arg1: string, arg2: string) => Boolean;\n  onChange: (arg0: string) => void;\n  onReturn: (arg0: string) => Boolean;\n}> = ({\n  spellcheck,\n  isValidAddition,\n  currentWord,\n  onChange,\n  onReturn,\n  letters,\n}) => (\n  <div className=\"WordSmith\">\n    <input\n      className={`WordSmith_input ${\n        spellcheck(currentWord) && 'WordSmith_input_valid'\n      }`}\n      value={currentWord}\n      placeholder=\"type here\"\n      onChange={(e) => onChange(e.currentTarget.value.toLowerCase())}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          if (onReturn(e.currentTarget.value)) {\n            e.currentTarget.value = '';\n          }\n          return true;\n        } else if (e.key === 'Backspace') {\n          return true;\n        } else if (\n          (e.key >= 'a' && e.key <= 'z') ||\n          (e.key >= 'A' && e.key <= 'Z')\n        ) {\n          if (isValidAddition(letters, currentWord, e.key.toLowerCase())) {\n            return true;\n          } else {\n            e.preventDefault();\n            return false;\n          }\n        }\n      }}\n      tabIndex={100}\n    />\n    <button\n      className=\"btn WordSmith_enter\"\n      disabled={!spellcheck(currentWord)}\n      onClick={(_e) => onReturn(currentWord)}\n    >\n      ⏎\n    </button>\n    <button\n      className=\"btn WordSmith_backspace\"\n      onClick={(_e) => onChange(currentWord.slice(0, -1))}\n    >\n      ⌫\n    </button>\n  </div>\n);\n\nexport default WordSmith;\n","import { shuffle_array, drop_item_mut } from './util';\nimport dist from './letter-dist-en.json';\nconst MAX_WEIGHT: number = Math.max(...dist.map((pair) => Number(pair[1])));\n\nexport const allowedAddition = (\n  letters: string[],\n  currentWord: string,\n  newLetter: string\n) => {\n  // Note: this is ugly, because it mutes the taken field as a side\n  // effect\n  let taken = `${currentWord}`.split('');\n  let available = letters.filter((l) => !drop_item_mut(taken, l));\n  return available.includes(newLetter);\n};\n\nexport const wordScore = (word: string) => {\n  if (word.length <= 2) {\n    return 0;\n  } else {\n    return word.split('').reduce((score: number, letter: string) => {\n      switch (letter) {\n        case 'a':\n        case 'e':\n        case 'i':\n        case 'l':\n        case 'n':\n        case 'o':\n        case 'r':\n        case 's':\n        case 't':\n        case 'u':\n          return 1 + score;\n        case 'd':\n        case 'g':\n          return 2 + score;\n        case 'b':\n        case 'c':\n        case 'm':\n        case 'p':\n          return 3 + score;\n        case 'f':\n        case 'h':\n        case 'v':\n        case 'w':\n        case 'y':\n          return 4 + score;\n        case 'k':\n          return 5 + score;\n        case 'j':\n        case 'x':\n          return 8 + score;\n        case 'q':\n        case 'z':\n          return 10 + score;\n        default:\n          return score;\n      }\n    }, 0);\n  }\n};\n\nexport const randomLetters: (arg0: number) => string[] = (count: number) => {\n  const maxOccurence = 4;\n  let pool = [];\n  for (let [l, weight] of dist) {\n    let probability = Number(weight) / MAX_WEIGHT;\n    let tickets = Math.ceil(probability * maxOccurence);\n    for (let i = 0; i < tickets; i++) {\n      pool.push(String(l));\n    }\n  }\n  return shuffle_array(pool).slice(0, count);\n};\n","import React, { FC } from 'react';\nimport './WordTreasure.css';\nimport { wordScore } from './game-rules';\n\nconst WordTreasure: FC<{ words: string[] }> = ({ words }) => (\n  <div className=\"WordTreasure\">\n    <ol>\n      {words\n        .sort((a, b) => wordScore(b) - wordScore(a))\n        .map((w) => (\n          <li key={w}>\n            <span className=\"WordTreasure_word\">{w} </span>\n            <span className=\"WordTreasure_word_score\">({wordScore(w)})</span>\n          </li>\n        ))}\n    </ol>\n  </div>\n);\n\nexport default WordTreasure;\n","import React, { FC } from 'react';\nimport './Score.css';\n\nconst Score: FC<{ score: number; target?: number }> = ({ score, target }) =>\n  target ? (\n    <div className=\"Score\">\n      Score: {score} / {target}\n    </div>\n  ) : (\n    <div className=\"Score\">Score: {score}</div>\n  );\n\nexport default Score;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Typo } from 'typo-js-ts';\nimport Lettergrid from './Lettergrid';\nimport WordSmith from './WordSmith';\nimport WordTreasure from './WordTreasure';\nimport Score from './Score';\nimport { wordScore, allowedAddition, randomLetters } from './game-rules';\nimport {\n  BrowserRouter as Router,\n  useLocation,\n  useHistory,\n  Link,\n} from 'react-router-dom';\nimport qs from 'query-string';\nimport msgpack from 'msgpack-lite';\nimport { Base64 } from 'js-base64';\n\ntype AppParams = {\n  letters?: string;\n  treasure?: string[];\n  targetScore?: string;\n};\n\nconst encodeWords: (words: string[]) => string = (words) => {\n  const msg = msgpack.encode(words);\n  return Base64.fromUint8Array(msg, true);\n};\n\nconst decodeWords: (arg0: string) => string[] = (encoded) => {\n  const decoded = Base64.toUint8Array(encoded);\n  return msgpack.decode(decoded);\n};\n\nfunction App() {\n  const { search } = useLocation();\n  const urlParams: AppParams = qs.parse(search);\n  const history = useHistory();\n\n  const update_query_params = (updates: {}) => {\n    const new_params: AppParams = { ...urlParams, ...updates };\n    if (qs.stringify(urlParams) !== qs.stringify(new_params)) {\n      history.push({ search: '?' + qs.stringify(new_params) });\n      console.log('new query params > ', new_params);\n    }\n  };\n\n  const given_letters =\n    (urlParams['letters'] && String(urlParams['letters']).split('')) || [];\n\n  const [score, setScore] = useState(0);\n  const [currWord, setCurrWord] = useState('');\n  const [letters, _setLetters] = useState<string[]>(given_letters);\n  const setLetters = (letters: string[]) => {\n    update_query_params({ letters: letters.join('') });\n    _setLetters(letters);\n  };\n\n  const givenTreasure =\n    (urlParams['treasure'] && decodeWords(String(urlParams['treasure']))) || [];\n  const [treasureList, _setTreasureList] = useState<string[]>(givenTreasure);\n  const setTreasureList = (words: string[]) => {\n    update_query_params({ treasure: encodeWords(words) });\n    _setTreasureList(words);\n  };\n\n  const num_letters = letters.length;\n\n  useEffect(() => {\n    if (num_letters === 0) {\n      setLetters(randomLetters(20));\n    }\n    // eslint-disable-next-line\n  }, [num_letters]);\n\n  useEffect(() => {\n    setScore(treasureList.reduce((score, word) => score + wordScore(word), 0));\n  }, [treasureList]);\n\n  const [dict, setDict] = useState<Typo>();\n  useEffect(() => {\n    console.log('loading spellchecker');\n    new Typo('en_GB', undefined, undefined, {\n      flags: {},\n      dictionaryPath: process.env.PUBLIC_URL + '/dictionaries',\n    }).ready\n      .then((d) => {\n        console.log('dictionary loaded');\n        setDict(d);\n      })\n      .catch(console.log);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Word Wizard</h1>\n      </header>\n      <p className=\"App_description\">\n        Conjure as many british english words as possible from this set of\n        letters. One and two letter words are worthless.\n      </p>\n      <div className=\"inputs\">\n        <Lettergrid\n          onClick={(l) => {\n            allowedAddition(letters, currWord, l) && setCurrWord(currWord + l);\n          }}\n          letters={letters}\n          highlighted={currWord.split('')}\n        />\n        <WordSmith\n          isValidAddition={allowedAddition}\n          spellcheck={(word: string) => (dict && dict.check(word)) || false}\n          currentWord={currWord}\n          letters={letters}\n          onChange={(s) => {\n            setCurrWord(s);\n          }}\n          onReturn={(s) => {\n            let spellchecked = dict && dict.check(s);\n            if (spellchecked) {\n              let uniq = new Set([...treasureList, s]);\n              setTreasureList(Array.from(uniq).sort());\n              setCurrWord('');\n              return true;\n            } else {\n              return false;\n            }\n          }}\n        />\n      </div>\n      <div className=\"outputs\">\n        <Score\n          score={score}\n          target={Number(urlParams['targetScore'] || undefined)}\n        />\n        <WordTreasure words={treasureList} />\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          marginTop: '2rem',\n        }}\n      >\n        <Link\n          style={{\n            paddingLeft: '1.5em',\n            paddingRight: '1.5em',\n            marginBottom: '1rem',\n          }}\n          className=\"btn\"\n          to={'.'}\n          onClick={(_) => {\n            setTreasureList([]);\n            setCurrWord('');\n            setLetters([]);\n          }}\n        >\n          New Game\n        </Link>\n        <Link\n          className=\"btn\"\n          style={{\n            paddingLeft: '1.5em',\n            paddingRight: '1.5em',\n            marginBottom: '1rem',\n          }}\n          target=\"_blank\"\n          to={{\n            pathname: '.',\n            search: qs.stringify({\n              letters: letters.join(''),\n              targetScore: score,\n            }),\n          }}\n        >\n          Challenge\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nconst AppStack = () => (\n  <Router>\n    <App />\n  </Router>\n);\n\nexport default AppStack;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './colors.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}