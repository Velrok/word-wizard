{"version":3,"sources":["util.ts","Lettergrid.tsx","WordSmith.tsx","game-rules.ts","WordTreasure.tsx","Score.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["drop_item_mut","array","item","i","indexOf","splice","Lettergrid","letters","highlighted","onClick","letter_pool","className","map","l","classname","_e","WordSmith","spellcheck","isValidAddition","currentWord","onChange","onReturn","value","placeholder","e","currentTarget","toLowerCase","onKeyDown","key","preventDefault","tabIndex","disabled","slice","MAX_WEIGHT","Math","max","dist","pair","Number","allowedAddition","newLetter","taken","split","filter","includes","wordScore","word","length","randomLetters","count","pool","weight","probability","tickets","ceil","push","String","arr","j","floor","random","shuffle_array","WordTreasure","words","sort","a","b","w","Score","score","App","useState","currWord","setCurrWord","setLetters","treasureList","setTreasureList","useEffect","dict","setDict","console","log","Typo","undefined","flags","dictionaryPath","process","ready","then","d","catch","reduce","check","s","uniq","Set","Array","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e388f94f.chunk.js","sourcesContent":["export const drop_item_mut: <T>(array: Array<T>, item: T) => Boolean = (\n  array,\n  item\n) => {\n  const i = array.indexOf(item);\n  if (i >= 0) {\n    array.splice(i, 1);\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// taken from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport const shuffle_array: <T>(arr: Array<T>) => Array<T> = (arr) => {\n  let array = [...arr];\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n","import React, { FC } from 'react';\nimport { drop_item_mut } from './util';\nimport './Lettergrid.css';\n\nconst Lettergrid: FC<{\n  letters: string[];\n  highlighted: string[];\n  onClick?: (arg0: string) => void;\n}> = ({ letters, highlighted, onClick }) => {\n  let letter_pool = [...highlighted];\n  return (\n    <div className=\"Lettergrid\">\n      {letters.map((l, i) => {\n        let classname = 'Lettergrid-letter btn';\n        if (drop_item_mut(letter_pool, l)) {\n          classname += ' Lettergrid-letter-highlighted';\n        }\n        return (\n          <span\n            key={i}\n            className={classname}\n            onClick={(_e) => {\n              onClick && onClick(l);\n            }}\n          >\n            {l}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Lettergrid;\n","import React, { FC } from 'react';\nimport './WordSmith.css';\n\nconst WordSmith: FC<{\n  letters: string[];\n  spellcheck: (word: string) => boolean;\n  currentWord: string;\n  isValidAddition: (arg0: string[], arg1: string, arg2: string) => Boolean;\n  onChange: (arg0: string) => void;\n  onReturn: (arg0: string) => Boolean;\n}> = ({\n  spellcheck,\n  isValidAddition,\n  currentWord,\n  onChange,\n  onReturn,\n  letters,\n}) => (\n  <div className=\"WordSmith\">\n    <input\n      className={`WordSmith_input ${\n        spellcheck(currentWord) && 'WordSmith_input_valid'\n      }`}\n      value={currentWord}\n      placeholder=\"type here\"\n      onChange={(e) => onChange(e.currentTarget.value.toLowerCase())}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          if (onReturn(e.currentTarget.value)) {\n            e.currentTarget.value = '';\n          }\n          return true;\n        } else if (e.key === 'Backspace') {\n          return true;\n        } else if (\n          (e.key >= 'a' && e.key <= 'z') ||\n          (e.key >= 'A' && e.key <= 'Z')\n        ) {\n          if (isValidAddition(letters, currentWord, e.key.toLowerCase())) {\n            return true;\n          } else {\n            e.preventDefault();\n            return false;\n          }\n        }\n      }}\n      tabIndex={100}\n    />\n    <button\n      className=\"btn WordSmith_enter\"\n      disabled={!spellcheck(currentWord)}\n      onClick={(_e) => onReturn(currentWord)}\n    >\n      ⏎\n    </button>\n    <button\n      className=\"btn WordSmith_backspace\"\n      onClick={(_e) => onChange(currentWord.slice(0, -1))}\n    >\n      ⌫\n    </button>\n  </div>\n);\n\nexport default WordSmith;\n","import { shuffle_array, drop_item_mut } from './util';\nimport dist from './letter-dist-en.json';\nconst MAX_WEIGHT: number = Math.max(...dist.map((pair) => Number(pair[1])));\n\nexport const allowedAddition = (\n  letters: string[],\n  currentWord: string,\n  newLetter: string\n) => {\n  // Note: this is ugly, because it mutes the taken field as a side\n  // effect\n  let taken = `${currentWord}`.split('');\n  let available = letters.filter((l) => !drop_item_mut(taken, l));\n  return available.includes(newLetter);\n};\n\nexport const wordScore = (word: string) => {\n  if (word.length <= 2) {\n    return 0;\n  } else {\n    return word.length;\n  }\n};\n\nexport const randomLetters: (arg0: number) => string[] = (count: number) => {\n  const maxOccurence = 4;\n  let pool = [];\n  for (let [l, weight] of dist) {\n    let probability = Number(weight) / MAX_WEIGHT;\n    let tickets = Math.ceil(probability * maxOccurence);\n    for (let i = 0; i < tickets; i++) {\n      pool.push(String(l));\n    }\n  }\n  return shuffle_array(pool).slice(0, count);\n};\n","import React, { FC } from 'react';\nimport './WordTreasure.css';\nimport { wordScore } from './game-rules';\n\nconst WordTreasure: FC<{ words: string[] }> = ({ words }) => (\n  <div className=\"WordTreasure\">\n    <ol>\n      {words\n        .sort((a, b) => wordScore(b) - wordScore(a))\n        .map((w) => (\n          <li key={w}>\n            <span className=\"WordTreasure_word\">{w} </span>\n            <span className=\"WordTreasure_word_score\">({wordScore(w)})</span>\n          </li>\n        ))}\n    </ol>\n  </div>\n);\n\nexport default WordTreasure;\n","import React, { FC } from 'react';\nimport './Score.css';\n\nconst Score: FC<{ score: number }> = ({ score }) => (\n  <div className=\"Score\">Score: {score}</div>\n);\n\nexport default Score;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Typo } from 'typo-js-ts';\nimport Lettergrid from './Lettergrid';\nimport WordSmith from './WordSmith';\nimport WordTreasure from './WordTreasure';\nimport Score from './Score';\nimport { allowedAddition, randomLetters } from './game-rules';\n\nfunction App() {\n  const [currWord, setCurrWord] = useState('');\n  const [letters, setLetters] = useState<string[]>([]);\n  const [treasureList, setTreasureList] = useState<string[]>([]);\n\n  useEffect(() => {\n    setLetters(randomLetters(20));\n  }, []);\n\n  const [dict, setDict] = useState<Typo>();\n  useEffect(() => {\n    console.log('loading spellchecker');\n    new Typo('en_GB', undefined, undefined, {\n      flags: {},\n      dictionaryPath: process.env.PUBLIC_URL + '/dictionaries',\n    }).ready\n      .then((d) => {\n        console.log('dictionary loaded');\n        setDict(d);\n      })\n      .catch(console.log);\n  }, []);\n\n  let score = treasureList.reduce((score, word) => score + word.length, 0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Word Wizard</h1>\n      </header>\n      <p className=\"App_description\">\n        Conjure as many british english words as possible from this set of\n        letters. One and two letter words are worthless.\n      </p>\n      <div className=\"inputs\">\n        <Lettergrid\n          onClick={(l) => {\n            allowedAddition(letters, currWord, l) && setCurrWord(currWord + l);\n          }}\n          letters={letters}\n          highlighted={currWord.split('')}\n        />\n        <WordSmith\n          isValidAddition={allowedAddition}\n          spellcheck={(word: string) => (dict && dict.check(word)) || false}\n          currentWord={currWord}\n          letters={letters}\n          onChange={(s) => {\n            setCurrWord(s);\n          }}\n          onReturn={(s) => {\n            let spellchecked = dict && dict.check(s);\n            if (spellchecked) {\n              let uniq = new Set([...treasureList, s]);\n              setTreasureList(Array.from(uniq).sort());\n              setCurrWord('');\n              return true;\n            } else {\n              return false;\n            }\n          }}\n        />\n      </div>\n      <div className=\"outputs\">\n        <Score score={score} />\n        <WordTreasure words={treasureList} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './colors.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}