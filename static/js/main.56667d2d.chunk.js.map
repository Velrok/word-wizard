{"version":3,"sources":["util.ts","Lettergrid.tsx","WordSmith.tsx","game-rules.ts","WordTreasure.tsx","Score.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["drop_item_mut","array","item","i","indexOf","splice","Lettergrid","letters","highlighted","onClick","letter_pool","className","map","l","classname","_e","WordSmith","spellcheck","isValidAddition","currentWord","onChange","onReturn","autoComplete","spellCheck","value","placeholder","e","currentTarget","toLowerCase","onKeyDown","key","preventDefault","tabIndex","disabled","slice","MAX_WEIGHT","Math","max","dist","pair","Number","allowedAddition","newLetter","taken","split","filter","includes","wordScore","word","length","reduce","score","letter","randomLetters","count","pool","weight","probability","tickets","ceil","push","String","arr","j","floor","random","shuffle_array","isLatest","words","index","getClasses","sortedIndex","classes","join","Item","scrollingRef","useCallback","el","classList","contains","scrollIntoView","behavior","ref","WordTreasure","indexed_words","sort","a","b","w","Score","target","encodeWords","msg","msgpack","encode","Base64","fromUint8Array","App","search","useLocation","urlParams","qs","parse","history","useHistory","update_query_params","updates","new_params","stringify","console","log","given_letters","useState","setScore","currWord","setCurrWord","_setLetters","setLetters","givenTreasure","encoded","decoded","toUint8Array","decode","decodeWords","treasureList","_setTreasureList","setTreasureList","treasure","num_letters","useEffect","dict","setDict","Typo","undefined","flags","dictionaryPath","process","ready","then","d","catch","check","s","style","display","justifyContent","marginTop","paddingLeft","paddingRight","marginBottom","to","_","pathname","targetScore","AppStack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56667d2d.chunk.js","sourcesContent":["export const drop_item_mut: <T>(array: Array<T>, item: T) => Boolean = (\n  array,\n  item\n) => {\n  const i = array.indexOf(item);\n  if (i >= 0) {\n    array.splice(i, 1);\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// taken from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport const shuffle_array: <T>(arr: Array<T>) => Array<T> = (arr) => {\n  let array = [...arr];\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n","import React, { FC } from 'react';\nimport { drop_item_mut } from './util';\nimport './Lettergrid.css';\n\nconst Lettergrid: FC<{\n  letters: string[];\n  highlighted: string[];\n  onClick?: (arg0: string) => void;\n}> = ({ letters, highlighted, onClick }) => {\n  let letter_pool = [...highlighted];\n  return (\n    <div className=\"Lettergrid\">\n      {letters.map((l, i) => {\n        let classname = 'Lettergrid-letter btn';\n        if (drop_item_mut(letter_pool, l)) {\n          classname += ' Lettergrid-letter-highlighted';\n        }\n        return (\n          <span\n            key={i}\n            className={classname}\n            onClick={(_e) => {\n              onClick && onClick(l);\n            }}\n          >\n            {l}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Lettergrid;\n","import React, { FC } from 'react';\nimport './WordSmith.css';\n\nconst WordSmith: FC<{\n  letters: string[];\n  spellcheck: (word: string) => boolean;\n  currentWord: string;\n  isValidAddition: (arg0: string[], arg1: string, arg2: string) => Boolean;\n  onChange: (arg0: string) => void;\n  onReturn: (arg0: string) => Boolean;\n}> = ({\n  spellcheck,\n  isValidAddition,\n  currentWord,\n  onChange,\n  onReturn,\n  letters,\n}) => (\n  <div className=\"WordSmith\">\n    <input\n      autoComplete=\"off\"\n      spellCheck=\"false\"\n      className={`WordSmith_input ${\n        spellcheck(currentWord) && 'WordSmith_input_valid'\n      }`}\n      value={currentWord}\n      placeholder=\"type here\"\n      onChange={(e) => onChange(e.currentTarget.value.toLowerCase())}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          if (onReturn(e.currentTarget.value)) {\n            e.currentTarget.value = '';\n          }\n          return true;\n        } else if (e.key === 'Backspace') {\n          return true;\n        } else if (\n          (e.key >= 'a' && e.key <= 'z') ||\n          (e.key >= 'A' && e.key <= 'Z')\n        ) {\n          if (isValidAddition(letters, currentWord, e.key.toLowerCase())) {\n            return true;\n          } else {\n            e.preventDefault();\n            return false;\n          }\n        }\n      }}\n      tabIndex={100}\n    />\n    <button\n      className=\"btn WordSmith_enter\"\n      disabled={!spellcheck(currentWord)}\n      onClick={(_e) => onReturn(currentWord)}\n    >\n      ⏎\n    </button>\n    <button\n      className=\"btn WordSmith_backspace\"\n      onClick={(_e) => onChange(currentWord.slice(0, -1))}\n    >\n      ⌫\n    </button>\n  </div>\n);\n\nexport default WordSmith;\n","import { shuffle_array, drop_item_mut } from './util';\nimport dist from './letter-dist-en.json';\nconst MAX_WEIGHT: number = Math.max(...dist.map((pair) => Number(pair[1])));\n\nexport const allowedAddition = (\n  letters: string[],\n  currentWord: string,\n  newLetter: string\n) => {\n  // Note: this is ugly, because it mutes the taken field as a side\n  // effect\n  let taken = `${currentWord}`.split('');\n  let available = letters.filter((l) => !drop_item_mut(taken, l));\n  return available.includes(newLetter);\n};\n\nexport const wordScore = (word: string) => {\n  if (word.length <= 2) {\n    return 0;\n  } else {\n    return (\n      word.length *\n      word.split('').reduce((score: number, letter: string) => {\n        switch (letter) {\n          case 'a':\n          case 'e':\n          case 'i':\n          case 'l':\n          case 'n':\n          case 'o':\n          case 'r':\n          case 's':\n          case 't':\n          case 'u':\n            return 1 + score;\n          case 'd':\n          case 'g':\n            return 2 + score;\n          case 'b':\n          case 'c':\n          case 'm':\n          case 'p':\n            return 3 + score;\n          case 'f':\n          case 'h':\n          case 'v':\n          case 'w':\n          case 'y':\n            return 4 + score;\n          case 'k':\n            return 5 + score;\n          case 'j':\n          case 'x':\n            return 7 + score;\n          case 'q':\n          case 'z':\n            return 8 + score;\n          default:\n            return score;\n        }\n      }, 0)\n    );\n  }\n};\n\nexport const randomLetters: (arg0: number) => string[] = (count: number) => {\n  const maxOccurence = 4;\n  let pool = [];\n  for (let [l, weight] of dist) {\n    let probability = Number(weight) / MAX_WEIGHT;\n    let tickets = Math.ceil(probability * maxOccurence);\n    for (let i = 0; i < tickets; i++) {\n      pool.push(String(l));\n    }\n  }\n  return shuffle_array(pool).slice(0, count);\n};\n","import React, { FC, useCallback } from 'react';\nimport './WordTreasure.css';\nimport { wordScore } from './game-rules';\n\nconst isLatest = (words: string[], index: number) => index === words.length - 1;\n\nconst getClasses = (words: string[], index: number, sortedIndex: number) => {\n  let classes = ['WordTreasure_word_item'];\n  if (isLatest(words, index)) {\n    classes.push('WordTreasure_word--newest');\n  }\n  if (isLatest(words, index) && sortedIndex === 0) {\n    classes.push('WordTreasure_word--new-highscore');\n  }\n  return classes.join(' ');\n};\n\nconst Item: FC<{\n  words: string[];\n  index: number;\n  sortedIndex: number;\n  word: string;\n}> = ({ words, index, sortedIndex, word }) => {\n  const scrollingRef = useCallback(\n    (el) => {\n      el &&\n        el.classList.contains('WordTreasure_word--newest') &&\n        el.scrollIntoView({\n          behavior: 'smooth',\n        });\n    },\n    [] // only once\n  );\n  return (\n    <li\n      ref={scrollingRef}\n      key={word}\n      className={getClasses(words, index, sortedIndex)}\n    >\n      <span className=\"WordTreasure_word\">{word} </span>\n      <span className=\"WordTreasure_word_score\">{wordScore(word)}</span>\n    </li>\n  );\n};\n\nconst WordTreasure: FC<{ words: string[] }> = ({ words }) => {\n  const indexed_words: Array<[string, number]> = words.map((item, index) => [\n    item,\n    index,\n  ]);\n\n  return (\n    <div className=\"WordTreasure\">\n      <ol>\n        {indexed_words\n          .sort(([a, _aa], [b, _bb]) => wordScore(b) - wordScore(a))\n          .map(([w, index], sortedIndex) => (\n            <Item\n              words={words}\n              index={index}\n              sortedIndex={sortedIndex}\n              word={w}\n            />\n          ))}\n      </ol>\n    </div>\n  );\n};\n\nexport default WordTreasure;\n","import React, { FC } from 'react';\nimport './Score.css';\n\nconst Score: FC<{ score: number; target?: number }> = ({ score, target }) =>\n  target ? (\n    <div className=\"Score\">\n      Score: {score} / {target}\n    </div>\n  ) : (\n    <div className=\"Score\">Score: {score}</div>\n  );\n\nexport default Score;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Typo } from 'typo-js-ts';\nimport Lettergrid from './Lettergrid';\nimport WordSmith from './WordSmith';\nimport WordTreasure from './WordTreasure';\nimport Score from './Score';\nimport { wordScore, allowedAddition, randomLetters } from './game-rules';\nimport {\n  BrowserRouter as Router,\n  useLocation,\n  useHistory,\n  Link,\n} from 'react-router-dom';\nimport qs from 'query-string';\nimport msgpack from 'msgpack-lite';\nimport { Base64 } from 'js-base64';\n\ntype AppParams = {\n  letters?: string;\n  treasure?: string[];\n  targetScore?: string;\n};\n\nconst encodeWords: (words: string[]) => string = (words) => {\n  const msg = msgpack.encode(words);\n  return Base64.fromUint8Array(msg, true);\n};\n\nconst decodeWords: (arg0: string) => string[] = (encoded) => {\n  const decoded = Base64.toUint8Array(encoded);\n  return msgpack.decode(decoded);\n};\n\nfunction App() {\n  const { search } = useLocation();\n  const urlParams: AppParams = qs.parse(search);\n  const history = useHistory();\n\n  const update_query_params = (updates: {}) => {\n    const new_params: AppParams = { ...urlParams, ...updates };\n    if (qs.stringify(urlParams) !== qs.stringify(new_params)) {\n      history.push({ search: '?' + qs.stringify(new_params) });\n      console.log('new query params > ', new_params);\n    }\n  };\n\n  const given_letters =\n    (urlParams['letters'] && String(urlParams['letters']).split('')) || [];\n\n  const [score, setScore] = useState(0);\n  const [currWord, setCurrWord] = useState('');\n  const [letters, _setLetters] = useState<string[]>(given_letters);\n  const setLetters = (letters: string[]) => {\n    update_query_params({ letters: letters.join('') });\n    _setLetters(letters);\n  };\n\n  const givenTreasure =\n    (urlParams['treasure'] && decodeWords(String(urlParams['treasure']))) || [];\n  const [treasureList, _setTreasureList] = useState<string[]>(givenTreasure);\n  const setTreasureList = (words: string[]) => {\n    update_query_params({ treasure: encodeWords(words) });\n    _setTreasureList(words);\n  };\n\n  const num_letters = letters.length;\n\n  useEffect(() => {\n    if (num_letters === 0) {\n      setLetters(randomLetters(20));\n    }\n    // eslint-disable-next-line\n  }, [num_letters]);\n\n  useEffect(() => {\n    setScore(treasureList.reduce((score, word) => score + wordScore(word), 0));\n  }, [treasureList]);\n\n  const [dict, setDict] = useState<Typo>();\n  useEffect(() => {\n    console.log('loading spellchecker');\n    new Typo('en_GB', undefined, undefined, {\n      flags: {},\n      dictionaryPath: process.env.PUBLIC_URL + '/dictionaries',\n    }).ready\n      .then((d) => {\n        console.log('dictionary loaded');\n        setDict(d);\n      })\n      .catch(console.log);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Word Wizard</h1>\n      </header>\n      <p className=\"App_description\">\n        Conjure as many british english words as possible from this set of\n        letters. One and two letter words are worthless.\n      </p>\n      <div className=\"inputs\">\n        <Lettergrid\n          onClick={(l) => {\n            allowedAddition(letters, currWord, l) && setCurrWord(currWord + l);\n          }}\n          letters={letters}\n          highlighted={currWord.split('')}\n        />\n        <WordSmith\n          isValidAddition={allowedAddition}\n          spellcheck={(word: string) => (dict && dict.check(word)) || false}\n          currentWord={currWord}\n          letters={letters}\n          onChange={(s) => {\n            setCurrWord(s);\n          }}\n          onReturn={(s) => {\n            let spellchecked = dict && dict.check(s);\n            if (spellchecked && treasureList.indexOf(s) === -1) {\n              setTreasureList([...treasureList, s]);\n              setCurrWord('');\n              return true;\n            } else {\n              return false;\n            }\n          }}\n        />\n\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            marginTop: '2rem',\n          }}\n        >\n          <Link\n            style={{\n              paddingLeft: '1.5em',\n              paddingRight: '1.5em',\n              marginBottom: '1rem',\n            }}\n            className=\"btn\"\n            to={'.'}\n            onClick={(_) => {\n              setTreasureList([]);\n              setCurrWord('');\n              setLetters([]);\n            }}\n          >\n            New Game\n          </Link>\n          <Link\n            className=\"btn\"\n            style={{\n              paddingLeft: '1.5em',\n              paddingRight: '1.5em',\n              marginBottom: '1rem',\n            }}\n            target=\"_blank\"\n            to={{\n              pathname: '.',\n              search: qs.stringify({\n                letters: letters.join(''),\n                targetScore: score,\n              }),\n            }}\n          >\n            Challenge\n          </Link>\n        </div>\n      </div>\n      <div className=\"outputs\">\n        <Score\n          score={score}\n          target={Number(urlParams['targetScore'] || undefined)}\n        />\n        <WordTreasure words={treasureList} />\n      </div>\n    </div>\n  );\n}\n\nconst AppStack = () => (\n  <Router>\n    <App />\n  </Router>\n);\n\nexport default AppStack;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './colors.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}